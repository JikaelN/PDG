// neutral model

/// killer whale Ne : SRKW : 27.4, ARKW : 38.9, TKW 86
// Ne ~600 ~400 generation ago
initialize() {
	// ??
	initializeSLiMOptions(keepPedigrees=T);
	// base effective population size
	defineGlobal("N", 600);
	// mutation rate
	defineGlobal("MU", 1e-7);
	// recombination rate
	defineGlobal("R", 1e-8);
	//genome length
	defineGlobal("L", 1e7);
	
	//length chr 1 : 183775391 // we can use 1 only *o*
	defineGlobal("L1", 183775391);
	//length chr 2: 175489017
	defineGlobal("L2", 175489017);
	//mutation rate
	initializeMutationRate(MU);
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0); // f = all mutation are m1, alternative gamma : mutation distribution gamma distribution
	//0.0 selection coefficient
	
	
	//defineGlobal("S", 2.0);
	//initializeMutationType("m2", 0.5, "f", S); // sweep not used
	
	
	// Define genomic element types for each chromosome 
	//only 2 chr atm
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m1, 1.0);
	
	// Initialize chromosomes
	initializeGenomicElement(g1, 0, L1-1);
	initializeGenomicElement(g2, L1, L1+L2-1);
	
	//Recombination rate
	initializeRecombinationRate(R);
	
	
}

// add subpop
1 early() {
	//Add subpopulation with effective population size N
	sim.addSubpop("p1", N); //Southern resident 	(SRKW)
	sim.addSubpop("p2", N); // Alaska Resident	(ARKW)
	sim.addSubpop("p3", N); // Northern Resident	(NRKW)
	sim.addSubpop("p4", N); // Transients			(TRKW)
	sim.addSubpop("p5", N); // Offshore 			(ORKW)
	
	
	
	//set value of the subpop population for the first iteration
	p1.setValue("previous_N", p1.individualCount);
	p2.setValue("previous_N", p2.individualCount);
	p3.setValue("previous_N", p3.individualCount);
	p4.setValue("previous_N", p4.individualCount);
	p5.setValue("previous_N", p5.individualCount);
	
	
	// constant for the log file
	defineConstant("LOG", community.createLogFile("Ne_log.csv"));
	
	// add columns to the log file
	LOG.addCycle();
	LOG.addCustomColumn("N(t-1) SRKW", "p1.getValue('previous_N');");
	LOG.addCustomColumn("N(t)SRKW", "p1.individualCount;");
	//LOG.addCustomColumn("N(t-1) ARKW", "p2.getValue('previous_N');");
	//LOG.addCustomColumn("N(t)ARKW", "p2.individualCount;");
	//LOG.addCustomColumn("N(t-1) NRKW", "p3.getValue('previous_N');");
	//LOG.addCustomColumn("N(t)NRKW", "p3.individualCount;");
	//LOG.addCustomColumn("N(t-1) TRKW", "p4.getValue('previous_N');");
	//LOG.addCustomColumn("N(t)TRKW", "p4.individualCount;");
	//LOG.addCustomColumn("N(t-1) ORKW", "p5.getValue('previous_N');");
	//LOG.addCustomColumn("N(t)ORKW", "p5.individualCount;");
	
	// Given in SLiM manual
	//LOG.addCustomColumn("freq", "mutTypeFrequency(m1);");
	LOG.addCustomColumn("Ne_heterozygosity", "estimateNe_Heterozygosity(p1);");
	LOG.addCustomColumn("Ne_inbreeding", "estimateNe_Inbreeding(p1);");
	
	
	
	
	
	
	
}

2:late() {

	
	// Population growth
	newSize = asInteger(p1.individualCount * 1.03);
	p1.setSubpopulationSize(newSize);
	
	LOG.logRow();
	p1.setValue("previous_N", p1.individualCount);
	p2.setValue("previous_N", p2.individualCount);
	//p3.setValue("previous_N", p3.individualCount);
	//p4.setValue("previous_N", p4.individualCount);
	//p5.setValue("previous_N", p5.individualCount);
	
	
	
	
	
}

20 late() {
	sim.simulationFinished();
	}

function (float)mutTypeFrequency(o<MutationType>$ mutType)
{
muts = sim.mutationsOfType(mutType);
if (muts.size() > 0)
return sim.mutationFrequencies(NULL, muts);
return NULL;
}
function (float)estimateNe_Heterozygosity(o<Subpopulation>$ subpop)
{
pi = calcHeterozygosity(p1.genomes);
return pi / (4 * MU);
}
function (integer)tabulateFecundity(o<Subpopulation>$ subpop, i$ previous_N)
{
parentIDs = subpop.individuals.pedigreeParentIDs;
rescaledParentIDs = parentIDs - min(parentIDs);
return tabulate(rescaledParentIDs, previous_N - 1);
}
function (float)estimateNe_Inbreeding(o<Subpopulation>$ subpop)
{
previous_N = subpop.getValue("previous_N");
k = tabulateFecundity(subpop, previous_N);
return (previous_N * mean(k) - 2) / (mean(k) - 1 + var(k) / mean(k));
}